//@version=6
indicator('Hurst Exponent [QuantA]', shorttitle = 'Hurst Exp [QA]', overlay = false, precision = 6, max_bars_back = 5000)

////////////
// INPUTS //

lookback = input.int(1024, title = 'Hurst Exp Lookback')

// Sample sizes
hurt_len1 = input.int(0, title = 'Sample Size 1')
hurt_len2 = input.int(0, title = 'Sample Size 2')
hurt_len3 = input.int(0, title = 'Sample Size 3')
hurt_len4 = input.int(32, title = 'Sample Size 4')
hurt_len5 = input.int(64, title = 'Sample Size 5')
hurt_len6 = input.int(128, title = 'Sample Size 6')
hurt_len7 = input.int(256, title = 'Sample Size 7')
hurt_len8 = input.int(512, title = 'Sample Size 8')

// Smoothing
show_smooth = input.bool(true, title = 'Show Smoothed Hurst Exp?')
smooth_len = input.int(10, title = 'Smoothing Length')

// Calculate from date
calc_from = input.time(timestamp('2000-01-01 00:00 +0000'), title = 'Calculate from Date')

//////////////////
// CALCULATIONS //

pnl = close / close[1] - 1

get_avg_rs(float group_len) =>
    res_ran_ar = array.new_float()
    groups = math.floor(lookback / group_len)
    for group = 0 to groups - 1 by 1
        group_shift = group * group_len
        pnl_sum = 0.0
        dev_sum = 0.0
        for i = 0 to group_len - 1 by 1
            pnl_sum := pnl_sum + pnl[group_shift + i]
            pnl_sum
        arr_mean = pnl_sum / group_len
        for i = 0 to group_len - 1 by 1
            dev_sum := dev_sum + math.pow(pnl[group_shift + i] - arr_mean, 2)
            dev_sum
        sd = math.sqrt(dev_sum / (group_len - 1))
        cum = 0.0
        cum_min = 999999999.0
        cum_max = -999999999.0
        for i = 0 to group_len - 1 by 1
            cum := cum + pnl[group_shift + i] - arr_mean
            cum_min := math.min(cum_min, cum)
            cum_max := math.max(cum_max, cum)
            cum_max
        array.push(res_ran_ar, (cum_max - cum_min) / sd)
    avg_rs = array.avg(res_ran_ar)
    avg_rs

log_rs = array.new_float()
log_n = array.new_float()
var float hurstexp = na

if time >= calc_from
    if hurt_len1 > 0
        array.push(log_rs, math.log(get_avg_rs(hurt_len1)))
        array.push(log_n, math.log(hurt_len1))
    if hurt_len2 > 0
        array.push(log_rs, math.log(get_avg_rs(hurt_len2)))
        array.push(log_n, math.log(hurt_len2))
    if hurt_len3 > 0
        array.push(log_rs, math.log(get_avg_rs(hurt_len3)))
        array.push(log_n, math.log(hurt_len3))
    if hurt_len4 > 0
        array.push(log_rs, math.log(get_avg_rs(hurt_len4)))
        array.push(log_n, math.log(hurt_len4))
    if hurt_len5 > 0
        array.push(log_rs, math.log(get_avg_rs(hurt_len5)))
        array.push(log_n, math.log(hurt_len5))
    if hurt_len6 > 0
        array.push(log_rs, math.log(get_avg_rs(hurt_len6)))
        array.push(log_n, math.log(hurt_len6))
    if hurt_len7 > 0
        array.push(log_rs, math.log(get_avg_rs(hurt_len7)))
        array.push(log_n, math.log(hurt_len7))
    if hurt_len8 > 0
        array.push(log_rs, math.log(get_avg_rs(hurt_len8)))
        array.push(log_n, math.log(hurt_len8))
    sum_top = 0.0
    sum_bot = 0.0
    for i = 0 to array.size(log_rs) - 1 by 1
        sum_top := sum_top + (array.get(log_rs, i) - array.avg(log_rs)) * (array.get(log_n, i) - array.avg(log_n))
        sum_bot := sum_bot + math.pow(array.get(log_n, i) - array.avg(log_n), 2)
        sum_bot
    hurstexp := sum_top / sum_bot
    hurstexp

hurstexp_smooth = ta.ema(hurstexp, smooth_len)

//////////
// PLOT //

plot(hurstexp, color = color.new(color.green, 0), linewidth = 2, title = 'HurstExp')
plot(show_smooth ? hurstexp_smooth : na, color = color.new(color.red, 0), linewidth = 2, title = 'HurstSmooth')
hline(0.3, 'Midline', color = color.yellow, linestyle = hline.style_dotted)
hline(0.5, 'Midline', color = color.gray, linestyle = hline.style_dotted)
hline(0.7, 'Midline', color = color.orange, linestyle = hline.style_dotted)
